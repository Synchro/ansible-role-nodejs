---
# Tasks file for NVM

- name: "NVM | Looking at shell profiles"
  stat:
    path: "{{ item }}"
  register: available_shell_profiles
  with_items:
  - "{{ shell_profiles }}"

- name: "NVM | Clean-up"
  become: yes
  become_user: "root"
  file:
    path: "{{ nvm_install_dir }}"
    state: absent
  when: nodejs_clean_install|bool == true

- name: NVM | Clean-up default version from shell profiles
  become: yes
  become_user: "root"
  lineinfile:
    dest: "{{ fubarhouse_user_dir }}/{{ item }}"
    regexp: '.nvm/v{{ node_version }}/bin'
    line:  'export PATH=$PATH:{{ nvm_install_dir }}/v{{ node_version }}/bin;'
    state: absent
  with_items:
    - "{{ available_shell_profiles.results }}"
  ignore_errors: yes
  when: item.stat.exists|bool == true

- name: NVM | Clean-up other versions from shell profiles
  become: yes
  become_user: "root"
  lineinfile:
    dest: "{{ fubarhouse_user_dir }}/{{ item[0].item }}"
    regexp: '.nvm/v{{ item[1] }}/bin'
    line:  'export PATH=$PATH:{{ nvm_install_dir }}/v{{ item[1] }}/bin;'
    state: absent
  with_nested:
    - "{{ available_shell_profiles.results }}"
    - "{{ node_versions }}"
  ignore_errors: yes
  when:
  - nodejs_clean_install|bool == true
  - item[0].stat.exists|bool == true

- name: "NodeJS | Remove imported exports not associated to specific versions"
  become: yes
  become_user: "{{ fubarhouse_user }}"
  lineinfile:
    dest: "{{ fubarhouse_user_dir }}/{{ item.item }}"
    line: "export PATH=$PATH:$(npm config --global get prefix)/bin"
    state: absent
  with_items: "{{ available_shell_profiles.stdout }}"
  when:
  - available_shell_profiles.stdout is defined
  - nodejs_clean_install|bool == true
  - item.stat.exists|bool == true

- name: "NVM | Check"
  stat:
    path: "{{ nvm_install_dir }}"
  register: fubarhouse_npm_nvm_installed

- name: "NVM | Ensure permissions are set"
  become: yes
  become_user: "root"
  file:
    path: "{{ item.path }}"
    state: directory
    mode: 0777
    owner: "{{ fubarhouse_user }}"
    recurse: yes
  with_items: "{{ nodejs_folder_paths }}"
  changed_when: false

- name: "NVM | Get distribution"
  become: yes
  become_user: root
  get_url:
    url: "https://github.com/creationix/nvm/archive/v{{ nvm_version }}.tar.gz"
    dest: "/tmp/{{ nvm_version }}.tar.gz"
  when: fubarhouse_npm_nvm_installed.stat.exists == false

- name: "NVM | Create temporary extraction directory"
  become: yes
  become_user: root
  file:
    state: directory
    mode: 0777
    path: "/tmp/nvm-{{ nvm_version }}"
  when: fubarhouse_npm_nvm_installed.stat.exists == false

- name: "NVM | Create pernament extraction directory"
  become: yes
  become_user: root
  file:
    state: directory
    mode: 0777
    path: "{{ nvm_install_dir }}"
  when: fubarhouse_npm_nvm_installed.stat.exists == false

- name: "NVM | Unpack distribution"
  become: yes
  become_user: "{{ fubarhouse_user }}"
  unarchive:
    src: "/tmp/{{ nvm_version }}.tar.gz"
    dest: "/tmp/nvm-{{ nvm_version }}"
    copy: "no"
  when: fubarhouse_npm_nvm_installed.stat.exists == false

- name: "NVM | Moving to installation directory"
  become: yes
  become_user: "{{ fubarhouse_user }}"
  synchronize:
    src: "/tmp/nvm-{{ nvm_version }}/nvm-{{ nvm_version }}"
    dest: "{{ nvm_install_dir }}"
    delete: yes
    recursive: yes
  delegate_to: "{{ inventory_hostname }}"
  when:
    - ansible_ssh_user is undefined
    - fubarhouse_npm_nvm_installed.stat.exists == false

- name: "NVM | Moving to installation directory"
  become: yes
  become_user: "{{ fubarhouse_user }}"
  shell: "cp -rf /tmp/nvm-{{ nvm_version }}/nvm-{{ nvm_version }}/* {{ nvm_install_dir }}/"
  when:
    - ansible_ssh_user is defined
    - fubarhouse_npm_nvm_installed.stat.exists == false

- name: "NVM | Remove temporary data"
  become: yes
  become_user: root
  file:
    path: "{{ item }}"
    state: absent
  with_items:
  - "/tmp/{{ nvm_version }}.tar.gz"
  - "tmp/nvm-{{ nvm_version }}"
  when: fubarhouse_npm_nvm_installed.stat.exists == false

- name: "NVM | Install"
  shell: "{{ nvm_install_dir }}/install.sh"
  when: fubarhouse_npm_nvm_installed.stat.exists == false

- name: "NVM | Ensure permissions are set"
  become: yes
  become_user: "root"
  file:
    path: "{{ nvm_install_dir }}"
    state: directory
    mode: 0777
    owner: "{{ fubarhouse_user }}"
    recurse: yes
  changed_when: false

- name: "NVM | Create an executable"
  template:
    src: "nvm.sh"
    dest: "{{ nvm_symlink_exec }}"
    owner: "{{ fubarhouse_user }}"
    mode: 0755
  when: fubarhouse_npm_nvm_installed.stat.exists == false

- name: "NVM | Get versions"
  become: yes
  become_user: "{{ fubarhouse_user }}"
  shell: "{{ nvm_symlink_exec }} ls-remote"
  register: nodejs_available_versions
  changed_when: false

- name: NVM | Ensure shell profiles are available
  become: yes
  become_user: "root"
  stat:
    path: "{{ fubarhouse_user_dir }}/{{ item }}"
  register: available_shell_profiles
  with_items: "{{ available_shell_profiles.results }}"
  failed_when: false

- name: NVM | Ensure shell profiles are configured for default version
  become: yes
  become_user: "root"
  lineinfile:
    dest: "{{ fubarhouse_user_dir }}/{{ item.item.item }}"
    regexp: '{{ nvm_install_dir }}/v{{ node_version }}/bin'
    line:  'export PATH=$PATH:{{ nvm_install_dir }}/v{{ node_version }}/bin;'
    state: present
  with_items:
    - "{{ available_shell_profiles.results }}"
  when: item.item.stat.exists|bool == true

- name: NVM | Ensure shell profiles are configured for other versions
  become: yes
  become_user: "root"
  lineinfile:
    dest: "{{ fubarhouse_user_dir }}/{{ item[0].item.item }}"
    regexp: '{{ nvm_install_dir }}/v{{ item[1] }}/bin'
    line:  'export PATH=$PATH:{{ nvm_install_dir }}/v{{ item[1] }}/bin;'
    state: present
  with_nested:
    - "{{ available_shell_profiles.results }}"
    - "{{ node_versions }}"
  when: item[0].item.stat.exists|bool == true

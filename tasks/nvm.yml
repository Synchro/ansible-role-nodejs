---
# Tasks file for NVM

- name: "NVM | Clean-up"
  become: yes
  become_user: "root"
  file:
    path: "{{ fubarhouse_npm.nvm_install_dir }}"
    state: absent
  when: nodejs_clean_install|bool == true

- name: NVM | Clean-up default version from shell profiles
  become: yes
  become_user: "root"
  lineinfile:
    dest: "{{ fubarhouse_npm.user_dir }}/{{ item.filename }}"
    regexp: '.nvm/v{{ node_version }}/bin'
    line:  'export PATH=$PATH:{{ fubarhouse_npm.user_dir }}/.nvm/v{{ node_version }}/bin;'
    state: absent
  with_items:
    - "{{ fubarhouse_npm.shell_profiles }}"
  ignore_errors: yes
  when: nodejs_clean_install|bool == true

- name: NVM | Clean-up other versions from shell profiles
  become: yes
  become_user: "root"
  lineinfile:
    dest: "{{ fubarhouse_npm.user_dir }}/{{ item[0].filename }}"
    regexp: '.nvm/v{{ item[1] }}/bin'
    line:  'export PATH=$PATH:{{ fubarhouse_npm.user_dir }}/.nvm/v{{ item[1] }}/bin;'
    state: absent
  with_nested:
    - "{{ fubarhouse_npm.shell_profiles }}"
    - "{{ node_versions }}"
  ignore_errors: yes
  when: nodejs_clean_install|bool == true

- name: "NodeJS | Remove imported exports not associated to specific versions"
  become: yes
  become_user: "{{ fubarhouse_user }}"
  lineinfile:
    dest: "{{ fubarhouse_npm.user_dir }}/{{ item.filename }}"
    line: "export PATH=$PATH:$(npm config --global get prefix)/bin"
    state: absent
  with_items: "{{ fubarhouse_npm.shell_profiles }}"
  when: nodejs_clean_install|bool == true

- name: "NVM | Check"
  stat:
    path: "{{ fubarhouse_npm.nvm_install_dir }}"
  register: fubarhouse_npm_nvm_installed

- name: "NVM | Ensure permissions are set"
  become: yes
  become_user: "root"
  file:
    path: "{{ item.path }}"
    state: directory
    mode: 0777
    owner: "{{ fubarhouse_user }}"
    recurse: yes
  with_items: "{{ fubarhouse_npm.folder_paths }}"
  changed_when: false

- name: "NVM | Clone/Update"
  become: yes
  become_user: "{{ fubarhouse_user }}"
  git:
    repo: "{{ nvm_repo }}"
    dest: "{{ fubarhouse_npm.nvm_install_dir }}"
    clone: yes
    update: no
    version: master
    recursive: false

- name: "NVM | Install"
  shell: "{{ fubarhouse_npm.nvm_install_dir }}/install.sh"
  when: fubarhouse_npm_nvm_installed.stat.exists == false

- name: "NVM | Create an executable"
  template:
    src: "nvm.sh"
    dest: "{{ fubarhouse_npm.nvm_symlink_exec }}"
    owner: "{{ fubarhouse_user }}"
    mode: 0755
  when: fubarhouse_npm_nvm_installed.stat.exists == false

- name: "NVM | Get versions"
  become: yes
  become_user: "{{ fubarhouse_user }}"
  shell: "{{ fubarhouse_npm.nvm_symlink_exec }} ls-remote"
  register: nodejs_available_versions
  changed_when: false

- name: NVM | Ensure shell profiles are available
  become: yes
  become_user: "root"
  stat:
    path: "{{ fubarhouse_npm.user_dir }}/{{ item.filename }}"
  register: available_shell_profiles
  with_items: "{{ fubarhouse_npm.shell_profiles }}"

- name: NVM | Ensure shell profiles are configured for default version
  become: yes
  become_user: "root"
  lineinfile:
    dest: "{{ fubarhouse_npm.user_dir }}/{{ item.item.filename }}"
    regexp: '.nvm/v{{ node_version }}/bin'
    line:  'export PATH=$PATH:{{ fubarhouse_npm.user_dir }}/.nvm/v{{ node_version }}/bin;'
    state: present
  with_items:
    - "{{ available_shell_profiles.results }}"
  ignore_errors: yes

- name: NVM | Ensure shell profiles are configured for other versions
  become: yes
  become_user: "root"
  lineinfile:
    dest: "{{ fubarhouse_npm.user_dir }}/{{ item[0].item.filename }}"
    regexp: '.nvm/v{{ item[1] }}/bin'
    line:  'export PATH=$PATH:{{ fubarhouse_npm.user_dir }}/.nvm/v{{ item[1] }}/bin;'
    state: present
  with_nested:
    - "{{ available_shell_profiles.results }}"
    - "{{ node_versions }}"
  ignore_errors: yes